// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/Skarlso/doki/pkg/git"
)

type FakeVCSProvider struct {
	GetCurrentBranchStub        func() (string, error)
	getCurrentBranchMutex       sync.RWMutex
	getCurrentBranchArgsForCall []struct {
	}
	getCurrentBranchReturns struct {
		result1 string
		result2 error
	}
	getCurrentBranchReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetDevTagStub        func() (string, error)
	getDevTagMutex       sync.RWMutex
	getDevTagArgsForCall []struct {
	}
	getDevTagReturns struct {
		result1 string
		result2 error
	}
	getDevTagReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetLatestRemoteTagStub        func(string, string) (string, error)
	getLatestRemoteTagMutex       sync.RWMutex
	getLatestRemoteTagArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getLatestRemoteTagReturns struct {
		result1 string
		result2 error
	}
	getLatestRemoteTagReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetOwnerAndRepoFromLocalStub        func() (string, string, error)
	getOwnerAndRepoFromLocalMutex       sync.RWMutex
	getOwnerAndRepoFromLocalArgsForCall []struct {
	}
	getOwnerAndRepoFromLocalReturns struct {
		result1 string
		result2 string
		result3 error
	}
	getOwnerAndRepoFromLocalReturnsOnCall map[int]struct {
		result1 string
		result2 string
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeVCSProvider) GetCurrentBranch() (string, error) {
	fake.getCurrentBranchMutex.Lock()
	ret, specificReturn := fake.getCurrentBranchReturnsOnCall[len(fake.getCurrentBranchArgsForCall)]
	fake.getCurrentBranchArgsForCall = append(fake.getCurrentBranchArgsForCall, struct {
	}{})
	stub := fake.GetCurrentBranchStub
	fakeReturns := fake.getCurrentBranchReturns
	fake.recordInvocation("GetCurrentBranch", []interface{}{})
	fake.getCurrentBranchMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVCSProvider) GetCurrentBranchCallCount() int {
	fake.getCurrentBranchMutex.RLock()
	defer fake.getCurrentBranchMutex.RUnlock()
	return len(fake.getCurrentBranchArgsForCall)
}

func (fake *FakeVCSProvider) GetCurrentBranchCalls(stub func() (string, error)) {
	fake.getCurrentBranchMutex.Lock()
	defer fake.getCurrentBranchMutex.Unlock()
	fake.GetCurrentBranchStub = stub
}

func (fake *FakeVCSProvider) GetCurrentBranchReturns(result1 string, result2 error) {
	fake.getCurrentBranchMutex.Lock()
	defer fake.getCurrentBranchMutex.Unlock()
	fake.GetCurrentBranchStub = nil
	fake.getCurrentBranchReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeVCSProvider) GetCurrentBranchReturnsOnCall(i int, result1 string, result2 error) {
	fake.getCurrentBranchMutex.Lock()
	defer fake.getCurrentBranchMutex.Unlock()
	fake.GetCurrentBranchStub = nil
	if fake.getCurrentBranchReturnsOnCall == nil {
		fake.getCurrentBranchReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getCurrentBranchReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeVCSProvider) GetDevTag() (string, error) {
	fake.getDevTagMutex.Lock()
	ret, specificReturn := fake.getDevTagReturnsOnCall[len(fake.getDevTagArgsForCall)]
	fake.getDevTagArgsForCall = append(fake.getDevTagArgsForCall, struct {
	}{})
	stub := fake.GetDevTagStub
	fakeReturns := fake.getDevTagReturns
	fake.recordInvocation("GetDevTag", []interface{}{})
	fake.getDevTagMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVCSProvider) GetDevTagCallCount() int {
	fake.getDevTagMutex.RLock()
	defer fake.getDevTagMutex.RUnlock()
	return len(fake.getDevTagArgsForCall)
}

func (fake *FakeVCSProvider) GetDevTagCalls(stub func() (string, error)) {
	fake.getDevTagMutex.Lock()
	defer fake.getDevTagMutex.Unlock()
	fake.GetDevTagStub = stub
}

func (fake *FakeVCSProvider) GetDevTagReturns(result1 string, result2 error) {
	fake.getDevTagMutex.Lock()
	defer fake.getDevTagMutex.Unlock()
	fake.GetDevTagStub = nil
	fake.getDevTagReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeVCSProvider) GetDevTagReturnsOnCall(i int, result1 string, result2 error) {
	fake.getDevTagMutex.Lock()
	defer fake.getDevTagMutex.Unlock()
	fake.GetDevTagStub = nil
	if fake.getDevTagReturnsOnCall == nil {
		fake.getDevTagReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getDevTagReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeVCSProvider) GetLatestRemoteTag(arg1 string, arg2 string) (string, error) {
	fake.getLatestRemoteTagMutex.Lock()
	ret, specificReturn := fake.getLatestRemoteTagReturnsOnCall[len(fake.getLatestRemoteTagArgsForCall)]
	fake.getLatestRemoteTagArgsForCall = append(fake.getLatestRemoteTagArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.GetLatestRemoteTagStub
	fakeReturns := fake.getLatestRemoteTagReturns
	fake.recordInvocation("GetLatestRemoteTag", []interface{}{arg1, arg2})
	fake.getLatestRemoteTagMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVCSProvider) GetLatestRemoteTagCallCount() int {
	fake.getLatestRemoteTagMutex.RLock()
	defer fake.getLatestRemoteTagMutex.RUnlock()
	return len(fake.getLatestRemoteTagArgsForCall)
}

func (fake *FakeVCSProvider) GetLatestRemoteTagCalls(stub func(string, string) (string, error)) {
	fake.getLatestRemoteTagMutex.Lock()
	defer fake.getLatestRemoteTagMutex.Unlock()
	fake.GetLatestRemoteTagStub = stub
}

func (fake *FakeVCSProvider) GetLatestRemoteTagArgsForCall(i int) (string, string) {
	fake.getLatestRemoteTagMutex.RLock()
	defer fake.getLatestRemoteTagMutex.RUnlock()
	argsForCall := fake.getLatestRemoteTagArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeVCSProvider) GetLatestRemoteTagReturns(result1 string, result2 error) {
	fake.getLatestRemoteTagMutex.Lock()
	defer fake.getLatestRemoteTagMutex.Unlock()
	fake.GetLatestRemoteTagStub = nil
	fake.getLatestRemoteTagReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeVCSProvider) GetLatestRemoteTagReturnsOnCall(i int, result1 string, result2 error) {
	fake.getLatestRemoteTagMutex.Lock()
	defer fake.getLatestRemoteTagMutex.Unlock()
	fake.GetLatestRemoteTagStub = nil
	if fake.getLatestRemoteTagReturnsOnCall == nil {
		fake.getLatestRemoteTagReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getLatestRemoteTagReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeVCSProvider) GetOwnerAndRepoFromLocal() (string, string, error) {
	fake.getOwnerAndRepoFromLocalMutex.Lock()
	ret, specificReturn := fake.getOwnerAndRepoFromLocalReturnsOnCall[len(fake.getOwnerAndRepoFromLocalArgsForCall)]
	fake.getOwnerAndRepoFromLocalArgsForCall = append(fake.getOwnerAndRepoFromLocalArgsForCall, struct {
	}{})
	stub := fake.GetOwnerAndRepoFromLocalStub
	fakeReturns := fake.getOwnerAndRepoFromLocalReturns
	fake.recordInvocation("GetOwnerAndRepoFromLocal", []interface{}{})
	fake.getOwnerAndRepoFromLocalMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeVCSProvider) GetOwnerAndRepoFromLocalCallCount() int {
	fake.getOwnerAndRepoFromLocalMutex.RLock()
	defer fake.getOwnerAndRepoFromLocalMutex.RUnlock()
	return len(fake.getOwnerAndRepoFromLocalArgsForCall)
}

func (fake *FakeVCSProvider) GetOwnerAndRepoFromLocalCalls(stub func() (string, string, error)) {
	fake.getOwnerAndRepoFromLocalMutex.Lock()
	defer fake.getOwnerAndRepoFromLocalMutex.Unlock()
	fake.GetOwnerAndRepoFromLocalStub = stub
}

func (fake *FakeVCSProvider) GetOwnerAndRepoFromLocalReturns(result1 string, result2 string, result3 error) {
	fake.getOwnerAndRepoFromLocalMutex.Lock()
	defer fake.getOwnerAndRepoFromLocalMutex.Unlock()
	fake.GetOwnerAndRepoFromLocalStub = nil
	fake.getOwnerAndRepoFromLocalReturns = struct {
		result1 string
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeVCSProvider) GetOwnerAndRepoFromLocalReturnsOnCall(i int, result1 string, result2 string, result3 error) {
	fake.getOwnerAndRepoFromLocalMutex.Lock()
	defer fake.getOwnerAndRepoFromLocalMutex.Unlock()
	fake.GetOwnerAndRepoFromLocalStub = nil
	if fake.getOwnerAndRepoFromLocalReturnsOnCall == nil {
		fake.getOwnerAndRepoFromLocalReturnsOnCall = make(map[int]struct {
			result1 string
			result2 string
			result3 error
		})
	}
	fake.getOwnerAndRepoFromLocalReturnsOnCall[i] = struct {
		result1 string
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeVCSProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getCurrentBranchMutex.RLock()
	defer fake.getCurrentBranchMutex.RUnlock()
	fake.getDevTagMutex.RLock()
	defer fake.getDevTagMutex.RUnlock()
	fake.getLatestRemoteTagMutex.RLock()
	defer fake.getLatestRemoteTagMutex.RUnlock()
	fake.getOwnerAndRepoFromLocalMutex.RLock()
	defer fake.getOwnerAndRepoFromLocalMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeVCSProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ git.VCSProvider = new(FakeVCSProvider)
